Successfully loaded data from datasets/math_dataset.json

--- Processing Record 0 ---
safety_orientation(Alex)
IAM HERE
safety_orientation
PREDICATE_OK
  Defining Predicate: safety_orientation with arity 1
    Inferred signature: ['Item'] -> Bool
membership_duration(Alex) = 8
membership_duration(Alex)
IAM HERE
membership_duration
PREDICATE_OK
  Defining Predicate: membership_duration with arity 1
    Inferred signature: ['Item'] -> Real
paid_annual_fee(Alex)
IAM HERE
paid_annual_fee
PREDICATE_OK
  Defining Predicate: paid_annual_fee with arity 1
    Inferred signature: ['Item'] -> Bool
∀x(valid_membership(x) ∧ safety_orientation(x)) → use_equipment(x)
(valid_membership(x) ∧ safety_orientation(x)) → use_equipment(x)
PARTS
valid_membership(x) ∧ safety_orientation(x)
PARTS
valid_membership(x)
IAM HERE
valid_membership
PREDICATE_OK
  Defining Predicate: valid_membership with arity 1
    Inferred signature: ['Item'] -> Bool
safety_orientation(x)
IAM HERE
safety_orientation
PREDICATE_OK
use_equipment(x)
IAM HERE
use_equipment
PREDICATE_OK
  Defining Predicate: use_equipment with arity 1
    Inferred signature: ['Item'] -> Bool
∀x(use_equipment(x) ∧ has_trainer(x)) → book_training(x)
(use_equipment(x) ∧ has_trainer(x)) → book_training(x)
PARTS
use_equipment(x) ∧ has_trainer(x)
PARTS
use_equipment(x)
IAM HERE
use_equipment
PREDICATE_OK
has_trainer(x)
IAM HERE
has_trainer
PREDICATE_OK
  Defining Predicate: has_trainer with arity 1
    Inferred signature: ['Item'] -> Bool
book_training(x)
IAM HERE
book_training
PREDICATE_OK
  Defining Predicate: book_training with arity 1
    Inferred signature: ['Item'] -> Bool
∀x(membership_duration(x) ≥ 6) → eligible_trainer(x)
(membership_duration(x) ≥ 6) → eligible_trainer(x)
PARTS
membership_duration(x) ≥ 6
membership_duration(x)
IAM HERE
membership_duration
PREDICATE_OK
eligible_trainer(x)
IAM HERE
eligible_trainer
PREDICATE_OK
  Defining Predicate: eligible_trainer with arity 1
    Inferred signature: ['Item'] -> Bool
∀x(paid_annual_fee(x) → valid_membership(x))
paid_annual_fee(x) → valid_membership(x)
PARTS
paid_annual_fee(x)
IAM HERE
paid_annual_fee
PREDICATE_OK
valid_membership(x)
IAM HERE
valid_membership
PREDICATE_OK

--- Processing Record 1 ---
∀x(active_status(x) ∧ completed_courses(x) ≥ 5) → eligible_advanced(x)
(active_status(x) ∧ completed_courses(x) ≥ 5) → eligible_advanced(x)
PARTS
active_status(x) ∧ completed_courses(x) ≥ 5
PARTS
active_status(x)
IAM HERE
active_status
PREDICATE_OK
  Defining Predicate: active_status with arity 1
    Inferred signature: ['Item'] -> Bool
completed_courses(x) ≥ 5
completed_courses(x)
IAM HERE
completed_courses
PREDICATE_OK
  Defining Predicate: completed_courses with arity 1
    Inferred signature: ['Item'] -> Real
eligible_advanced(x)
IAM HERE
eligible_advanced
PREDICATE_OK
  Defining Predicate: eligible_advanced with arity 1
    Inferred signature: ['Item'] -> Bool
∀x(eligible_advanced(x) → requires_approval(x))
eligible_advanced(x) → requires_approval(x)
PARTS
eligible_advanced(x)
IAM HERE
eligible_advanced
PREDICATE_OK
requires_approval(x)
IAM HERE
requires_approval
PREDICATE_OK
  Defining Predicate: requires_approval with arity 1
    Inferred signature: ['Item'] -> Bool
active_status(sarah)
IAM HERE
active_status
PREDICATE_OK
completed_courses(sarah) = 4
completed_courses(sarah)
IAM HERE
completed_courses
PREDICATE_OK
has_approval(sarah)
IAM HERE
has_approval
PREDICATE_OK
  Defining Predicate: has_approval with arity 1
    Inferred signature: ['Item'] -> Bool

--- Processing Record 2 ---
∀x∀h(clinical_hours(x, h) ∧ h ≥ 500) → advanced_practice(x)
∀h(clinical_hours(x, h) ∧ h ≥ 500) → advanced_practice(x)
(clinical_hours(x, h) ∧ h ≥ 500) → advanced_practice(x)
PARTS
clinical_hours(x, h) ∧ h ≥ 500
PARTS
clinical_hours(x, h)
IAM HERE
clinical_hours
PREDICATE_OK
  Defining Predicate: clinical_hours with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
h ≥ 500
h ≥ 500
PREDICATE_OK
  Defining Predicate: h ≥ 500 with arity 0
advanced_practice(x)
IAM HERE
advanced_practice
PREDICATE_OK
  Defining Predicate: advanced_practice with arity 1
    Inferred signature: ['Item'] -> Bool
clinical_hours(john, 600)
IAM HERE
clinical_hours
PREDICATE_OK
registered_nurse(john)
IAM HERE
registered_nurse
PREDICATE_OK
  Defining Predicate: registered_nurse with arity 1
    Inferred signature: ['Item'] -> Bool
∀x(registered_nurse(x) ∧ advanced_practice(x)) → can_prescribe(x)
(registered_nurse(x) ∧ advanced_practice(x)) → can_prescribe(x)
PARTS
registered_nurse(x) ∧ advanced_practice(x)
PARTS
registered_nurse(x)
IAM HERE
registered_nurse
PREDICATE_OK
advanced_practice(x)
IAM HERE
advanced_practice
PREDICATE_OK
can_prescribe(x)
IAM HERE
can_prescribe
PREDICATE_OK
  Defining Predicate: can_prescribe with arity 1
    Inferred signature: ['Item'] -> Bool

--- Processing Record 3 ---
∀x(has_card(x) ∧ safety_orientation(x)) → use_equipment(x)
(has_card(x) ∧ safety_orientation(x)) → use_equipment(x)
PARTS
has_card(x) ∧ safety_orientation(x)
PARTS
has_card(x)
IAM HERE
has_card
PREDICATE_OK
  Defining Predicate: has_card with arity 1
    Inferred signature: ['Item'] -> Bool
safety_orientation(x)
IAM HERE
safety_orientation
PREDICATE_OK
use_equipment(x)
IAM HERE
use_equipment
PREDICATE_OK
∀x(use_equipment(x) ∧ has_trainer(x)) → book_training(x)
(use_equipment(x) ∧ has_trainer(x)) → book_training(x)
PARTS
use_equipment(x) ∧ has_trainer(x)
PARTS
use_equipment(x)
IAM HERE
use_equipment
PREDICATE_OK
has_trainer(x)
IAM HERE
has_trainer
PREDICATE_OK
book_training(x)
IAM HERE
book_training
PREDICATE_OK
∀x(membership_duration(x) ≥ 6) → eligible_trainer(x)
(membership_duration(x) ≥ 6) → eligible_trainer(x)
PARTS
membership_duration(x) ≥ 6
membership_duration(x)
IAM HERE
membership_duration
PREDICATE_OK
eligible_trainer(x)
IAM HERE
eligible_trainer
PREDICATE_OK
∀x(paid_annual_fee(x) → valid_membership(x))
paid_annual_fee(x) → valid_membership(x)
PARTS
paid_annual_fee(x)
IAM HERE
paid_annual_fee
PREDICATE_OK
valid_membership(x)
IAM HERE
valid_membership
PREDICATE_OK

--- Processing Record 4 ---
∀s∀m(attendance(s,m) ≥ 80) → allowed_exam(s,m)
∀m(attendance(s,m) ≥ 80) → allowed_exam(s,m)
(attendance(s,m) ≥ 80) → allowed_exam(s,m)
PARTS
attendance(s,m) ≥ 80
attendance(s,m)
IAM HERE
attendance
PREDICATE_OK
  Defining Predicate: attendance with arity 2
    Inferred signature: ['Item', 'Item'] -> Real
allowed_exam(s,m)
IAM HERE
allowed_exam
PREDICATE_OK
  Defining Predicate: allowed_exam with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀m(allowed_exam(s,m) ∧ completes_exam(s,m)) → can_pass(s,m)
∀m(allowed_exam(s,m) ∧ completes_exam(s,m)) → can_pass(s,m)
(allowed_exam(s,m) ∧ completes_exam(s,m)) → can_pass(s,m)
PARTS
allowed_exam(s,m) ∧ completes_exam(s,m)
PARTS
allowed_exam(s,m)
IAM HERE
allowed_exam
PREDICATE_OK
completes_exam(s,m)
IAM HERE
completes_exam
PREDICATE_OK
  Defining Predicate: completes_exam with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
can_pass(s,m)
IAM HERE
can_pass
PREDICATE_OK
  Defining Predicate: can_pass with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀m(¬pass(s,m) → retake(s,m))
∀m(¬pass(s,m) → retake(s,m))
¬pass(s,m) → retake(s,m)
PARTS
¬pass(s,m)
IAM HERE
pass
PREDICATE_OK
  Defining Predicate: pass with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
retake(s,m)
IAM HERE
retake
PREDICATE_OK
  Defining Predicate: retake with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀m(requires_assignment(m) → ForAll(s, completes_assignment(s,m) ∨ takes_exam(s,m)))
requires_assignment(m) → ForAll(s, completes_assignment(s,m) ∨ takes_exam(s,m))
PARTS
requires_assignment(m)
IAM HERE
requires_assignment
PREDICATE_OK
  Defining Predicate: requires_assignment with arity 1
    Inferred signature: ['Item'] -> Bool
∀s (completes_assignment(s,m) ∨ takes_exam(s,m))
completes_assignment(s,m) ∨ takes_exam(s,m)
PARTS
completes_assignment(s,m)
IAM HERE
completes_assignment
PREDICATE_OK
  Defining Predicate: completes_assignment with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
takes_exam(s,m)
IAM HERE
takes_exam
PREDICATE_OK
  Defining Predicate: takes_exam with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀m(attendance(s,m) < 50) → ¬allowed_exam(s,m)
∀m(attendance(s,m) < 50) → ¬allowed_exam(s,m)
(attendance(s,m) < 50) → ¬allowed_exam(s,m)
PARTS
attendance(s,m) < 50
attendance(s,m)
IAM HERE
attendance
PREDICATE_OK
¬allowed_exam(s,m)
IAM HERE
allowed_exam
PREDICATE_OK
∀s(∃m1, ∃m2, ∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ grade(s,m1) > 8.5 ∧ grade(s,m2) > 8.5 ∧ grade(s,m3) > 8.5) → scholarship(s)
(∃m1, ∃m2, ∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ grade(s,m1) > 8.5 ∧ grade(s,m2) > 8.5 ∧ grade(s,m3) > 8.5) → scholarship(s)
PARTS
∃m1, ∃m2, ∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ grade(s,m1) > 8.5 ∧ grade(s,m2) > 8.5 ∧ grade(s,m3) > 8.5
∃m2, ∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ grade(s,m1) > 8.5 ∧ grade(s,m2) > 8.5 ∧ grade(s,m3) > 8.5
∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ grade(s,m1) > 8.5 ∧ grade(s,m2) > 8.5 ∧ grade(s,m3) > 8.5
m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ grade(s,m1) > 8.5 ∧ grade(s,m2) > 8.5 ∧ grade(s,m3) > 8.5
PARTS
m1 ≠ m2
m1 ≠ m2
PREDICATE_OK
  Defining Predicate: m1 ≠ m2 with arity 0
m2 ≠ m3
m2 ≠ m3
PREDICATE_OK
  Defining Predicate: m2 ≠ m3 with arity 0
m1 ≠ m3
m1 ≠ m3
PREDICATE_OK
  Defining Predicate: m1 ≠ m3 with arity 0
grade(s,m1) > 8.5
grade(s,m1)
IAM HERE
grade
PREDICATE_OK
  Defining Predicate: grade with arity 2
    Inferred signature: ['Item', 'Item'] -> Real
grade(s,m2) > 8.5
grade(s,m2)
IAM HERE
grade
PREDICATE_OK
grade(s,m3) > 8.5
grade(s,m3)
IAM HERE
grade
PREDICATE_OK
scholarship(s)
IAM HERE
scholarship
PREDICATE_OK
  Defining Predicate: scholarship with arity 1
    Inferred signature: ['Item'] -> Bool
∀s∀m(takes_exam(s,m) ∧ score(s,m) < passing_score) → ¬pass(s,m)
∀m(takes_exam(s,m) ∧ score(s,m) < passing_score) → ¬pass(s,m)
(takes_exam(s,m) ∧ score(s,m) < passing_score) → ¬pass(s,m)
PARTS
takes_exam(s,m) ∧ score(s,m) < passing_score
PARTS
takes_exam(s,m)
IAM HERE
takes_exam
PREDICATE_OK
score(s,m) < passing_score
score(s,m)
IAM HERE
score
PREDICATE_OK
  Defining Predicate: score with arity 2
    Inferred signature: ['Item', 'Item'] -> Real
¬pass(s,m)
IAM HERE
pass
PREDICATE_OK
∀s∀m(attendance(s,m) = 100 ∧ ¬completes_exam(s,m)) → ¬pass(s,m)
∀m(attendance(s,m) = 100 ∧ ¬completes_exam(s,m)) → ¬pass(s,m)
(attendance(s,m) = 100 ∧ ¬completes_exam(s,m)) → ¬pass(s,m)
PARTS
attendance(s,m) = 100 ∧ ¬completes_exam(s,m)
PARTS
attendance(s,m) = 100
attendance(s,m)
IAM HERE
attendance
PREDICATE_OK
¬completes_exam(s,m)
IAM HERE
completes_exam
PREDICATE_OK
¬pass(s,m)
IAM HERE
pass
PREDICATE_OK
∀s(∃m1, ∃m2, ∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ pass(s,m1) ∧ pass(s,m2) ∧ pass(s,m3) ∧ required(m1) ∧ required(m2) ∧ required(m3)) → graduate(s)
(∃m1, ∃m2, ∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ pass(s,m1) ∧ pass(s,m2) ∧ pass(s,m3) ∧ required(m1) ∧ required(m2) ∧ required(m3)) → graduate(s)
PARTS
∃m1, ∃m2, ∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ pass(s,m1) ∧ pass(s,m2) ∧ pass(s,m3) ∧ required(m1) ∧ required(m2) ∧ required(m3)
∃m2, ∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ pass(s,m1) ∧ pass(s,m2) ∧ pass(s,m3) ∧ required(m1) ∧ required(m2) ∧ required(m3)
∃m3, m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ pass(s,m1) ∧ pass(s,m2) ∧ pass(s,m3) ∧ required(m1) ∧ required(m2) ∧ required(m3)
m1 ≠ m2 ∧ m2 ≠ m3 ∧ m1 ≠ m3 ∧ pass(s,m1) ∧ pass(s,m2) ∧ pass(s,m3) ∧ required(m1) ∧ required(m2) ∧ required(m3)
PARTS
m1 ≠ m2
m1 ≠ m2
PREDICATE_OK
m2 ≠ m3
m2 ≠ m3
PREDICATE_OK
m1 ≠ m3
m1 ≠ m3
PREDICATE_OK
pass(s,m1)
IAM HERE
pass
PREDICATE_OK
pass(s,m2)
IAM HERE
pass
PREDICATE_OK
pass(s,m3)
IAM HERE
pass
PREDICATE_OK
required(m1)
IAM HERE
required
PREDICATE_OK
  Defining Predicate: required with arity 1
    Inferred signature: ['Item'] -> Bool
required(m2)
IAM HERE
required
PREDICATE_OK
required(m3)
IAM HERE
required
PREDICATE_OK
graduate(s)
IAM HERE
graduate
PREDICATE_OK
  Defining Predicate: graduate with arity 1
    Inferred signature: ['Item'] -> Bool
∀s∀m(attendance(s,m) < 50 ∧ completes_assignment(s,m) ∧ professor_approval(s,m)) → allowed_exam(s,m)
∀m(attendance(s,m) < 50 ∧ completes_assignment(s,m) ∧ professor_approval(s,m)) → allowed_exam(s,m)
(attendance(s,m) < 50 ∧ completes_assignment(s,m) ∧ professor_approval(s,m)) → allowed_exam(s,m)
PARTS
attendance(s,m) < 50 ∧ completes_assignment(s,m) ∧ professor_approval(s,m)
PARTS
attendance(s,m) < 50
attendance(s,m)
IAM HERE
attendance
PREDICATE_OK
completes_assignment(s,m)
IAM HERE
completes_assignment
PREDICATE_OK
professor_approval(s,m)
IAM HERE
professor_approval
PREDICATE_OK
  Defining Predicate: professor_approval with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
allowed_exam(s,m)
IAM HERE
allowed_exam
PREDICATE_OK

--- Processing Record 5 ---
∀s(study(s,PoliticalTheory) > 12) → understand(s,PoliticalIdeologies)
(study(s,PoliticalTheory) > 12) → understand(s,PoliticalIdeologies)
PARTS
study(s,PoliticalTheory) > 12
study(s,PoliticalTheory)
IAM HERE
study
PREDICATE_OK
  Defining Predicate: study with arity 2
    Inferred signature: ['Item', 'Item'] -> Real
understand(s,PoliticalIdeologies)
IAM HERE
understand
PREDICATE_OK
  Defining Predicate: understand with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s(understand(s,PoliticalIdeologies) → analyze(s,GovernmentPolicies))
understand(s,PoliticalIdeologies) → analyze(s,GovernmentPolicies)
PARTS
understand(s,PoliticalIdeologies)
IAM HERE
understand
PREDICATE_OK
analyze(s,GovernmentPolicies)
IAM HERE
analyze
PREDICATE_OK
  Defining Predicate: analyze with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s(analyze(s,GovernmentPolicies) → (debate(s) ∨ write_essay(s)))
analyze(s,GovernmentPolicies) → (debate(s) ∨ write_essay(s))
PARTS
analyze(s,GovernmentPolicies)
IAM HERE
analyze
PREDICATE_OK
debate(s) ∨ write_essay(s)
PARTS
debate(s)
IAM HERE
debate
PREDICATE_OK
  Defining Predicate: debate with arity 1
    Inferred signature: ['Item'] -> Bool
write_essay(s)
IAM HERE
write_essay
PREDICATE_OK
  Defining Predicate: write_essay with arity 1
    Inferred signature: ['Item'] -> Bool
∀s(¬debate(s) → write_essay(s))
¬debate(s) → write_essay(s)
PARTS
¬debate(s)
IAM HERE
debate
PREDICATE_OK
write_essay(s)
IAM HERE
write_essay
PREDICATE_OK
∀s(study(s,PoliticalTheory) < 6) → struggle(s,PoliticalIdeologies)
(study(s,PoliticalTheory) < 6) → struggle(s,PoliticalIdeologies)
PARTS
study(s,PoliticalTheory) < 6
study(s,PoliticalTheory)
IAM HERE
study
PREDICATE_OK
struggle(s,PoliticalIdeologies)
IAM HERE
struggle
PREDICATE_OK
  Defining Predicate: struggle with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s(professor_requires(s,Debate) → (debate(s) ∨ justified_reason(s)))
professor_requires(s,Debate) → (debate(s) ∨ justified_reason(s))
PARTS
professor_requires(s,Debate)
IAM HERE
professor_requires
PREDICATE_OK
  Defining Predicate: professor_requires with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
debate(s) ∨ justified_reason(s)
PARTS
debate(s)
IAM HERE
debate
PREDICATE_OK
justified_reason(s)
IAM HERE
justified_reason
PREDICATE_OK
  Defining Predicate: justified_reason with arity 1
    Inferred signature: ['Item'] -> Bool
∀s(write_essay(s) ∧ high_quality(s)) → academic_recognition(s)
(write_essay(s) ∧ high_quality(s)) → academic_recognition(s)
PARTS
write_essay(s) ∧ high_quality(s)
PARTS
write_essay(s)
IAM HERE
write_essay
PREDICATE_OK
high_quality(s)
IAM HERE
high_quality
PREDICATE_OK
  Defining Predicate: high_quality with arity 1
    Inferred signature: ['Item'] -> Bool
academic_recognition(s)
IAM HERE
academic_recognition
PREDICATE_OK
  Defining Predicate: academic_recognition with arity 1
    Inferred signature: ['Item'] -> Bool
∀s(academic_recognition(s) ∧ field(s,PoliticalStudies)) → qualify_fellowship(s)
(academic_recognition(s) ∧ field(s,PoliticalStudies)) → qualify_fellowship(s)
PARTS
academic_recognition(s) ∧ field(s,PoliticalStudies)
PARTS
academic_recognition(s)
IAM HERE
academic_recognition
PREDICATE_OK
field(s,PoliticalStudies)
IAM HERE
field
PREDICATE_OK
  Defining Predicate: field with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
qualify_fellowship(s)
IAM HERE
qualify_fellowship
PREDICATE_OK
  Defining Predicate: qualify_fellowship with arity 1
    Inferred signature: ['Item'] -> Bool
∀p(controversial(p) → ForAll(s, must_analyze(s,p)))
controversial(p) → ForAll(s, must_analyze(s,p))
PARTS
controversial(p)
IAM HERE
controversial
PREDICATE_OK
  Defining Predicate: controversial with arity 1
    Inferred signature: ['Item'] -> Bool
∀s (must_analyze(s,p))
must_analyze(s,p)
IAM HERE
must_analyze
PREDICATE_OK
  Defining Predicate: must_analyze with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s(¬debate(s) ∧ ¬write_essay(s)) → fail(s,PoliticalTheory)
(¬debate(s) ∧ ¬write_essay(s)) → fail(s,PoliticalTheory)
PARTS
¬debate(s) ∧ ¬write_essay(s)
PARTS
¬debate(s)
IAM HERE
debate
PREDICATE_OK
¬write_essay(s)
IAM HERE
write_essay
PREDICATE_OK
fail(s,PoliticalTheory)
IAM HERE
fail
PREDICATE_OK
  Defining Predicate: fail with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool

--- Processing Record 6 ---
∀s(study(s,quantum_mechanics) ≥ 15) → understand(s,superposition)
(study(s,quantum_mechanics) ≥ 15) → understand(s,superposition)
PARTS
study(s,quantum_mechanics) ≥ 15
study(s,quantum_mechanics)
IAM HERE
study
PREDICATE_OK
understand(s,superposition)
IAM HERE
understand
PREDICATE_OK
∀s(understand(s,superposition) → explain(s,quantum_measurement))
understand(s,superposition) → explain(s,quantum_measurement)
PARTS
understand(s,superposition)
IAM HERE
understand
PREDICATE_OK
explain(s,quantum_measurement)
IAM HERE
explain
PREDICATE_OK
  Defining Predicate: explain with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s(explain(s,quantum_measurement) → (write_paper(s) ∨ give_presentation(s)))
explain(s,quantum_measurement) → (write_paper(s) ∨ give_presentation(s))
PARTS
explain(s,quantum_measurement)
IAM HERE
explain
PREDICATE_OK
write_paper(s) ∨ give_presentation(s)
PARTS
write_paper(s)
IAM HERE
write_paper
PREDICATE_OK
  Defining Predicate: write_paper with arity 1
    Inferred signature: ['Item'] -> Bool
give_presentation(s)
IAM HERE
give_presentation
PREDICATE_OK
  Defining Predicate: give_presentation with arity 1
    Inferred signature: ['Item'] -> Bool
∀s(¬give_presentation(s) → write_paper(s))
¬give_presentation(s) → write_paper(s)
PARTS
¬give_presentation(s)
IAM HERE
give_presentation
PREDICATE_OK
write_paper(s)
IAM HERE
write_paper
PREDICATE_OK
∀s(study(s,quantum_mechanics) < 8) → struggle(s,superposition)
(study(s,quantum_mechanics) < 8) → struggle(s,superposition)
PARTS
study(s,quantum_mechanics) < 8
study(s,quantum_mechanics)
IAM HERE
study
PREDICATE_OK
struggle(s,superposition)
IAM HERE
struggle
PREDICATE_OK
∀s(professor_requires(s,presentation) → (give_presentation(s) ∨ justified_reason(s)))
professor_requires(s,presentation) → (give_presentation(s) ∨ justified_reason(s))
PARTS
professor_requires(s,presentation)
IAM HERE
professor_requires
PREDICATE_OK
give_presentation(s) ∨ justified_reason(s)
PARTS
give_presentation(s)
IAM HERE
give_presentation
PREDICATE_OK
justified_reason(s)
IAM HERE
justified_reason
PREDICATE_OK
∀s(write_paper(s) ∧ original_work(s)) → academic_recognition(s)
(write_paper(s) ∧ original_work(s)) → academic_recognition(s)
PARTS
write_paper(s) ∧ original_work(s)
PARTS
write_paper(s)
IAM HERE
write_paper
PREDICATE_OK
original_work(s)
IAM HERE
original_work
PREDICATE_OK
  Defining Predicate: original_work with arity 1
    Inferred signature: ['Item'] -> Bool
academic_recognition(s)
IAM HERE
academic_recognition
PREDICATE_OK
∀s(academic_recognition(s) ∧ field(s,quantum_mechanics)) → qualify_scholarship(s)
(academic_recognition(s) ∧ field(s,quantum_mechanics)) → qualify_scholarship(s)
PARTS
academic_recognition(s) ∧ field(s,quantum_mechanics)
PARTS
academic_recognition(s)
IAM HERE
academic_recognition
PREDICATE_OK
field(s,quantum_mechanics)
IAM HERE
field
PREDICATE_OK
qualify_scholarship(s)
IAM HERE
qualify_scholarship
PREDICATE_OK
  Defining Predicate: qualify_scholarship with arity 1
    Inferred signature: ['Item'] -> Bool
∀e(experiment(e,entanglement) → ForAll(s, must_analyze(s,e)))
experiment(e,entanglement) → ForAll(s, must_analyze(s,e))
PARTS
experiment(e,entanglement)
IAM HERE
experiment
PREDICATE_OK
  Defining Predicate: experiment with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s (must_analyze(s,e))
must_analyze(s,e)
IAM HERE
must_analyze
PREDICATE_OK
∀s(¬write_paper(s) ∧ ¬give_presentation(s)) → fail(s,quantum_mechanics)
(¬write_paper(s) ∧ ¬give_presentation(s)) → fail(s,quantum_mechanics)
PARTS
¬write_paper(s) ∧ ¬give_presentation(s)
PARTS
¬write_paper(s)
IAM HERE
write_paper
PREDICATE_OK
¬give_presentation(s)
IAM HERE
give_presentation
PREDICATE_OK
fail(s,quantum_mechanics)
IAM HERE
fail
PREDICATE_OK

--- Processing Record 7 ---
∀s∀t(Retention(s,t) = e^(-t/s))
∀t(Retention(s,t) = e^(-t/s))
Retention(s,t) = e^(-t/s)
Retention(s,t)
IAM HERE
Retention
PREDICATE_OK
  Defining Predicate: Retention with arity 2
    Using predefined signature: ['Item', 'Item'] -> String
∀s(use_spaced_repetition(s) → better_memory_retention(s))
use_spaced_repetition(s) → better_memory_retention(s)
PARTS
use_spaced_repetition(s)
IAM HERE
use_spaced_repetition
PREDICATE_OK
  Defining Predicate: use_spaced_repetition with arity 1
    Inferred signature: ['Item'] -> Bool
better_memory_retention(s)
IAM HERE
better_memory_retention
PREDICATE_OK
  Defining Predicate: better_memory_retention with arity 1
    Inferred signature: ['Item'] -> Bool
∀s∀m(sleep_well(s) ∧ review_material(s,m) → stronger_memory_connections(s,m))
∀m(sleep_well(s) ∧ review_material(s,m) → stronger_memory_connections(s,m))
sleep_well(s) ∧ review_material(s,m) → stronger_memory_connections(s,m)
PARTS
sleep_well(s)
IAM HERE
sleep_well
PREDICATE_OK
  Defining Predicate: sleep_well with arity 1
    Inferred signature: ['Item'] -> Bool
review_material(s,m)
IAM HERE
review_material
PREDICATE_OK
  Defining Predicate: review_material with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
stronger_memory_connections(s,m)
IAM HERE
stronger_memory_connections
PREDICATE_OK
  Defining Predicate: stronger_memory_connections with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀f(use_flashcards(s,f) → higher_retention_rate(s,f))
∀f(use_flashcards(s,f) → higher_retention_rate(s,f))
use_flashcards(s,f) → higher_retention_rate(s,f)
PARTS
use_flashcards(s,f)
IAM HERE
use_flashcards
PREDICATE_OK
  Defining Predicate: use_flashcards with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
higher_retention_rate(s,f)
IAM HERE
higher_retention_rate
PREDICATE_OK
  Defining Predicate: higher_retention_rate with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀m(ReviewBeforeForgetting(s,m) → HigherMemoryEfficiency(s,m))
∀m(ReviewBeforeForgetting(s,m) → HigherMemoryEfficiency(s,m))
ReviewBeforeForgetting(s,m) → HigherMemoryEfficiency(s,m)
PARTS
ReviewBeforeForgetting(s,m)
IAM HERE
ReviewBeforeForgetting
PREDICATE_OK
  Defining Predicate: ReviewBeforeForgetting with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
HigherMemoryEfficiency(s,m)
IAM HERE
HigherMemoryEfficiency
PREDICATE_OK
  Defining Predicate: HigherMemoryEfficiency with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀m(self_test(s,m) → (activate_hippocampus(s) ∧ improve_recall(s,m)))
∀m(self_test(s,m) → (activate_hippocampus(s) ∧ improve_recall(s,m)))
self_test(s,m) → (activate_hippocampus(s) ∧ improve_recall(s,m))
PARTS
self_test(s,m)
IAM HERE
self_test
PREDICATE_OK
  Defining Predicate: self_test with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
activate_hippocampus(s) ∧ improve_recall(s,m)
PARTS
activate_hippocampus(s)
IAM HERE
activate_hippocampus
PREDICATE_OK
  Defining Predicate: activate_hippocampus with arity 1
    Inferred signature: ['Item'] -> Bool
improve_recall(s,m)
IAM HERE
improve_recall
PREDICATE_OK
  Defining Predicate: improve_recall with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀m(encounter_different_contexts(s,m) → higher_long_term_retention(s,m))
∀m(encounter_different_contexts(s,m) → higher_long_term_retention(s,m))
encounter_different_contexts(s,m) → higher_long_term_retention(s,m)
PARTS
encounter_different_contexts(s,m)
IAM HERE
encounter_different_contexts
PREDICATE_OK
  Defining Predicate: encounter_different_contexts with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
higher_long_term_retention(s,m)
IAM HERE
higher_long_term_retention
PREDICATE_OK
  Defining Predicate: higher_long_term_retention with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀m(too_short_intervals(s,m) → inefficient_learning(s,m))
∀m(too_short_intervals(s,m) → inefficient_learning(s,m))
too_short_intervals(s,m) → inefficient_learning(s,m)
PARTS
too_short_intervals(s,m)
IAM HERE
too_short_intervals
PREDICATE_OK
  Defining Predicate: too_short_intervals with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
inefficient_learning(s,m)
IAM HERE
inefficient_learning
PREDICATE_OK
  Defining Predicate: inefficient_learning with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀m(too_long_intervals(s,m) → high_forgetting_rate(s,m))
∀m(too_long_intervals(s,m) → high_forgetting_rate(s,m))
too_long_intervals(s,m) → high_forgetting_rate(s,m)
PARTS
too_long_intervals(s,m)
IAM HERE
too_long_intervals
PREDICATE_OK
  Defining Predicate: too_long_intervals with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
high_forgetting_rate(s,m)
IAM HERE
high_forgetting_rate
PREDICATE_OK
  Defining Predicate: high_forgetting_rate with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
∀s∀m(ai_personalized_schedule(s,m) → most_efficient_learning(s,m))
∀m(ai_personalized_schedule(s,m) → most_efficient_learning(s,m))
ai_personalized_schedule(s,m) → most_efficient_learning(s,m)
PARTS
ai_personalized_schedule(s,m)
IAM HERE
ai_personalized_schedule
PREDICATE_OK
  Defining Predicate: ai_personalized_schedule with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool
most_efficient_learning(s,m)
IAM HERE
most_efficient_learning
PREDICATE_OK
  Defining Predicate: most_efficient_learning with arity 2
    Inferred signature: ['Item', 'Item'] -> Bool

--- Processing Record 8 ---
∀s∀t(Retention(s,t) = e^(-t/s))
∀t(Retention(s,t) = e^(-t/s))
Retention(s,t) = e^(-t/s)
Retention(s,t)
IAM HERE
Retention
PREDICATE_OK
∀s(use_spaced_repetition(s) → better_memory_retention(s))
use_spaced_repetition(s) → better_memory_retention(s)
PARTS
use_spaced_repetition(s)
IAM HERE
use_spaced_repetition
PREDICATE_OK
better_memory_retention(s)
IAM HERE
better_memory_retention
PREDICATE_OK
∀s∀m(sleep_well(s) ∧ review_material(s,m) → stronger_memory_connections(s,m))
∀m(sleep_well(s) ∧ review_material(s,m) → stronger_memory_connections(s,m))
sleep_well(s) ∧ review_material(s,m) → stronger_memory_connections(s,m)
PARTS
sleep_well(s)
IAM HERE
sleep_well
PREDICATE_OK
review_material(s,m)
IAM HERE
review_material
PREDICATE_OK
stronger_memory_connections(s,m)
IAM HERE
stronger_memory_connections
PREDICATE_OK
∀s∀f(use_flashcards(s,f) → higher_retention_rate(s,f))
∀f(use_flashcards(s,f) → higher_retention_rate(s,f))
use_flashcards(s,f) → higher_retention_rate(s,f)
PARTS
use_flashcards(s,f)
IAM HERE
use_flashcards
PREDICATE_OK
higher_retention_rate(s,f)
IAM HERE
higher_retention_rate
PREDICATE_OK
∀s∀m(ReviewBeforeForgetting(s,m) → HigherMemoryEfficiency(s,m))
∀m(ReviewBeforeForgetting(s,m) → HigherMemoryEfficiency(s,m))
ReviewBeforeForgetting(s,m) → HigherMemoryEfficiency(s,m)
PARTS
ReviewBeforeForgetting(s,m)
IAM HERE
ReviewBeforeForgetting
PREDICATE_OK
HigherMemoryEfficiency(s,m)
IAM HERE
HigherMemoryEfficiency
PREDICATE_OK
∀s∀m(self_test(s,m) → (activate_hippocampus(s) ∧ improve_recall(s,m)))
∀m(self_test(s,m) → (activate_hippocampus(s) ∧ improve_recall(s,m)))
self_test(s,m) → (activate_hippocampus(s) ∧ improve_recall(s,m))
PARTS
self_test(s,m)
IAM HERE
self_test
PREDICATE_OK
activate_hippocampus(s) ∧ improve_recall(s,m)
PARTS
activate_hippocampus(s)
IAM HERE
activate_hippocampus
PREDICATE_OK
improve_recall(s,m)
IAM HERE
improve_recall
PREDICATE_OK
∀s∀m(encounter_different_contexts(s,m) → higher_long_term_retention(s,m))
∀m(encounter_different_contexts(s,m) → higher_long_term_retention(s,m))
encounter_different_contexts(s,m) → higher_long_term_retention(s,m)
PARTS
encounter_different_contexts(s,m)
IAM HERE
encounter_different_contexts
PREDICATE_OK
higher_long_term_retention(s,m)
IAM HERE
higher_long_term_retention
PREDICATE_OK
∀s∀m(too_short_intervals(s,m) → inefficient_learning(s,m))
∀m(too_short_intervals(s,m) → inefficient_learning(s,m))
too_short_intervals(s,m) → inefficient_learning(s,m)
PARTS
too_short_intervals(s,m)
IAM HERE
too_short_intervals
PREDICATE_OK
inefficient_learning(s,m)
IAM HERE
inefficient_learning
PREDICATE_OK
∀s∀m(too_long_intervals(s,m) → high_forgetting_rate(s,m))
∀m(too_long_intervals(s,m) → high_forgetting_rate(s,m))
too_long_intervals(s,m) → high_forgetting_rate(s,m)
PARTS
too_long_intervals(s,m)
IAM HERE
too_long_intervals
PREDICATE_OK
high_forgetting_rate(s,m)
IAM HERE
high_forgetting_rate
PREDICATE_OK
∀s∀m(ai_personalized_schedule(s,m) → most_efficient_learning(s,m))
∀m(ai_personalized_schedule(s,m) → most_efficient_learning(s,m))
ai_personalized_schedule(s,m) → most_efficient_learning(s,m)
PARTS
ai_personalized_schedule(s,m)
IAM HERE
ai_personalized_schedule
PREDICATE_OK
most_efficient_learning(s,m)
IAM HERE
most_efficient_learning
PREDICATE_OK

--- Processing Record 9 ---
∀ABC(triangle(ABC) → (angle(A) + angle(B) + angle(C) = 180))
triangle(ABC) → (angle(A) + angle(B) + angle(C) = 180)
PARTS
triangle(ABC)
IAM HERE
triangle
PREDICATE_OK
  Defining Predicate: triangle with arity 1
    Inferred signature: ['Item'] -> Bool
angle(A) + angle(B) + angle(C) = 180
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
PARTS
angle(A) + angle(B) + angle(C)
Traceback (most recent call last):
  File "i:\xAI_EQA_Contest\main\math_data_processing.py", line 927, in <module>
    processed_data = process_dataset(raw_data)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "i:\xAI_EQA_Contest\main\math_data_processing.py", line 875, in process_dataset
    z3_premise = parse_fol_string_to_z3(fol_str)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "i:\xAI_EQA_Contest\main\math_data_processing.py", line 564, in parse_fol_string_to_z3
    predicate = parse_fol_string_to_z3(fol_str)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "i:\xAI_EQA_Contest\main\math_data_processing.py", line 711, in parse_fol_string_to_z3
    e_predicates.append(parse_fol_string_to_z3(e_part))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "i:\xAI_EQA_Contest\main\math_data_processing.py", line 328, in parse_fol_string_to_z3
    z = parse_fol_string_to_z3(pred, return_sort = z3.RealSort())
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "i:\xAI_EQA_Contest\main\math_data_processing.py", line 711, in parse_fol_string_to_z3
    e_predicates.append(parse_fol_string_to_z3(e_part))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "i:\xAI_EQA_Contest\main\math_data_processing.py", line 711, in parse_fol_string_to_z3
    e_predicates.append(parse_fol_string_to_z3(e_part))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "i:\xAI_EQA_Contest\main\math_data_processing.py", line 711, in parse_fol_string_to_z3
    e_predicates.append(parse_fol_string_to_z3(e_part))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  [Previous line repeated 985 more times]
  File "i:\xAI_EQA_Contest\main\math_data_processing.py", line 481, in parse_fol_string_to_z3
    match = regex.search(r"¬*\w+\((?:[^()]+|(?R))*\)", fol_str)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ADMIN\AppData\Local\Programs\Python\Python311\Lib\site-packages\regex\regex.py", line 267, in search
    pat = _compile(pattern, flags, ignore_unused, kwargs, True)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ADMIN\AppData\Local\Programs\Python\Python311\Lib\site-packages\regex\regex.py", line 459, in _compile
    if (flags & DEBUG) != 0:
        ~~~~~~^~~~~~~
  File "C:\Users\ADMIN\AppData\Local\Programs\Python\Python311\Lib\enum.py", line 1523, in __and__
    return self.__class__(value & other)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ADMIN\AppData\Local\Programs\Python\Python311\Lib\enum.py", line 711, in __call__
    return cls.__new__(cls, value)
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ADMIN\AppData\Local\Programs\Python\Python311\Lib\enum.py", line 1101, in __new__
    return cls._value2member_map_[value]
           ^^^^^^^^^^^^^^^^^^^^^^
RecursionError: maximum recursion depth exceeded while calling a Python object
